generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id              Int              @id() @default(autoincrement())
  email           String           @unique
  discordId       String           @unique
  firstName       String
  lastName        String?
  birthday        DateTime?
  info            String?
  lastDiscordName String?
  graduationDate  DateTime?
  createdAt       DateTime         @default(now())
  roleAssignments RoleAssignment[]
  alreadyVotedOnBool BoolVote[] @relation("alreadyVoted")
  votesCreated BoolVote[] @relation("createdBy")

}

enum MemberRoleAccessLevel {
	// Full access and control. For developer & president only.
  admin
  // Almost full access and control. For, e.g., officers.
  mod
  // For members, extra features.
  member
  // Guests only.
  guest
}

model MemberRole {
  roleName        String                @id()
  roleDescription String                @default("")
  accessLevel     MemberRoleAccessLevel @default(guest)
  assignments     RoleAssignment[]

  allowedToVoteOnBool BoolVote[]

}

// Uses two FKs as a unique composit pk. 
model RoleAssignment {
  memberID       Int
  member         Member     @relation(fields: [memberID], references: [id])
  memberRoleName String
  memberRole     MemberRole @relation(fields: [memberRoleName], references: [roleName])
  assignedAt     DateTime   @default(now())

  // composite pk
  @@id([memberID, memberRoleName])
}

enum VoteTypes {
  poll
  vote
  amendment
}

// A vote of "Aye" or "Nay"
model BoolVote{
  id Int @id() @default(autoincrement())
  createdOn DateTime @default(now())
  discordMessageId String?
  createdById Int
  createdBy Member @relation("createdBy", fields:[createdById], references:[id])

  voteType VoteTypes
  startsAt DateTime
  endsAt DateTime
  prompt String
  ayeInfo String?
  nayInfo String?
  ayes Int @default(0)
  nays Int @default(0)
  ongoing Boolean @default(false)
  alreadyVoted Member[] @relation("alreadyVoted")
  allowedRoles MemberRole[]
}
